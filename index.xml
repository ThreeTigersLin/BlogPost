<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hello friends.</title>
    <link>https://threetigerslin.github.io/BlogPost/</link>
    <description>Recent content on hello friends.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://threetigerslin.github.io/BlogPost/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>创建一个简单Cache对象</title>
      <link>https://threetigerslin.github.io/BlogPost/post/17creating-simple-cache-object/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/17creating-simple-cache-object/</guid>
      <description>+++
创建一个简单Cache对象 作者: Jason Lowe-Power
译者: 落木
+++
在本章中，我们将在上一章创建内存SimObject的框架之上，增加缓存的逻辑到里面。
SimpleCache SimObject 在创建SCon脚本之后，您可以在这里下载我们创建的SimObject python文件。我们将这个简单的内存对象命名为SimpleCache和在src/learning_gem5/simple_cache创建SimObject python文件。
from m5.params import * from m5.proxy import * from MemObject import MemObject class SimpleCache(MemObject): type = &amp;#39;SimpleCache&amp;#39; cxx_header = &amp;#34;learning_gem5/simple_cache/simple_cache.hh&amp;#34; cpu_side = VectorSlavePort(&amp;#34;CPU side port, receives requests&amp;#34;) mem_side = MasterPort(&amp;#34;Memory side port, sends requests&amp;#34;) latency = Param.Cycles(1, &amp;#34;Cycles taken on a hit or to resolve a miss&amp;#34;) size = Param.MemorySize(&amp;#39;16kB&amp;#39;, &amp;#34;The size of the cache&amp;#34;) system = Param.</description>
    </item>
    
    <item>
      <title>在内存系统创建一个SimObject</title>
      <link>https://threetigerslin.github.io/BlogPost/post/16creating-simobject-in-mem-sys/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/16creating-simobject-in-mem-sys/</guid>
      <description>+++
在内存系统创建一个SimObject 作者: Jason Lowe-Power
译者: 落木
+++
在本章中，我们将创建一个简单的内存SimObject。该对象位于CPU和内存总线之间。在下一章，我们将在这个简单的内存SimObject之上增加一些逻辑去实现一个简单的阻塞型单处理器cache。
gem5 master port和slave port 在深入内存SimObject实现之前，我们需要先理解gem5的master port和slave port接口。就像之前在简单配置这一章讨论的一样，所有的内存SimObject都是通过port连接在一起。这些port提供了内存对象之间的严格的接口。
这些port实现了3种不同的内存系统仿真模式：timing, atomic, functional。最重要的一种仿真模式是timing模式，该模式是唯一一个能产生和真实设备接近的正确仿真结果。其他模式只是在特定场景下使用。
atomic模式是一个十分有用的在预热模拟器或者特定区域进行快进仿真。这个模式认为内存系统没有事件会产生。相应地，所有的内存访问请求在一个单一的长长的调用链里面完成。对于内存SimObject，atomic访问不是必须实现的，除非用来快进模拟或者模拟器预热。
functional模式在debugging模式下发挥作用。functional模式用来在认为需要从host读取数据到模拟器内存的场景。在systemcall 仿真模式下经常使用，例如，functional模式被用来从host加载process.cmd二进制文件到仿真系统的内存里，这样仿真系统能够使用它们。funcitonal访问在读的时候需要返回最新(most up-to-date)的数据，而无论这些数据在哪；并且在写的时候更新所有的有效数据（例如，在一个有多个有效同一块地址的cache块系统里）。
Packet 在gem5，Packet被用来在port之间发送数据。一个Packet由对应的内存请求访问MemReq对象构成。MemReq持有原始内存请求的信息，原始请求初始化该packet，包括地址和访问类型(读或者写等)。
Packet也包含一个MemCmd，代表packet目前的命令。这个命令会在packet的生命周期内动态变化（例如，一旦内存命令满足的的话，请求转变成响应）。最常见的MemCmd是ReadReq，ReadResp，WriteReq，WriteResp。同样对于cache或者其他命令类型有写回请求(WritebackDirty, WritebackClean)。
packet同样持有请求的数据或者数据的指针。当创建packet的时候有选项确定是否数据是动态的(需要明确地申请和释放)，或者是静态的(申请或者释放由packet对象进行)。
最后，packet通常用来在经典cache模型中作为跟踪一致性的单元。因此，很多packet 代码和经典的cache一致性协议有关。尽管如此，packet能用来在所有的gem5 内存SimObject之间进行通信，即使它们和cache一致性没有直接关系(例如，DRAM控制器或者CPU模型)。
所有的port接口函数接收一个packet指针作为参数，因为这个指针很常见，gem5定义了一个PacketPtr类型。
port接口 在gem5有两种类型的port：master port和slave port。当您实现一个内存SimObject时，您将实现至少一个上面的port类型。您创建的port需要从MaterPort或者SlavePort继承。mater port总是发送请求（request，响应地接收响应(response)），相应地，slave port 总是接收请求(发送响应)。
图master-slave-1概要展示了简单的timing模式下mater port和slave port之间的交互。其他模式master和slave之间使用简单地使用一个调用链实现。
master-slave-1
正如上面提到的，所有的port接口需要PacketPtr作为一个参数，每一个函数（sendTimingReq，recvTimingReq等）接收一个PacketPtr参数，这个packet用来请求或者响应的发送和接收。
recvTimingReq返回一个bool类型的返回值。改布尔值在调用master的上下文返回，如果返回true表示该packet被slave接收。另一方面如果返回值是false，意味着slave目前没能力接收请求，该请求必须在后续的某个时间点重试。
在master-slave-1-fig，首先，master通过调用sendingTimingReq发送一个timing request，对应的调用是recvTimingResp。在slave，从recvTimingResp返回时，sendingTimingReq返回。master继续执行，slave开始进行必要的操作去完成请求（例如，如果是cache，它需要查找tags看看是否有匹配返回）。
一旦slave完成了请求后，它发送响应到master，slave带着响应packet（这个应该是和请求是同一个PacketPtr，但当时是一个响应请求）调用sendingTimingResp。另一边，master 调用函数recvTimingResp。该函数返回true。这样，一次请求响应的交互过程就完成了。
后面在master-slave-example-section，我们将展示这些函数的例子。
有可能master或者slave在收到请求或者响应的时候处于busy状态。图master-slave-2-fig展示了slave处于busy时，有一个原始请求发送给它。
master-slave-2-fig
在这种情况下，slave port所在的对象从recvTimingReq函数返回false。当一个master在调用sendTimingReq收到false后，它必须等待直到函数recvReqRetry被执行，当这个函数被调用时，master才被允许再次调用sendTimingRequest。上面的图展示了timing request遇到一次request失败的情况，但是有可能请求会多次发送失败（注意：master有责任跟踪这个packet的发送失败，而不是slave；在失败的情况下，slave不保存PacketPtr）。
同样地，master-slave-3-fig展示了当slave尝试发送response时，master处于busy的情形。这种情况下，slave不能继续调用sendTimingResp直到它收到了一个recvRespRetry。
master-slave-3-fig
在这两种情况，有个场景很重要，retry的代码路径可能是在一个调用堆栈上。比如，当master调用sendRespRetry，recvTimingReq有可能在同一个堆栈被调用，因此，很容易创建一个无限递归的bug。所有，一个内存SimObject发送一个retry前，确保就绪接收另外一个packet很重要。
简单内存SimObject例子 在本节，我们将构建一个简单的内存SimObject，它简单传递cpu侧（一个简单cpu模型）过来的请求到内存侧（一个简单内存总线），见下面的simple-memobj-figure图。它有一个master port能用来发送请求到内存总线，两个cpu侧的slave port一个是指令port一个是数据port。在下一章，我们将增加逻辑让这个内存SimObject成为一个cache。
simple-memobj-figure
声明一个SimObject 和我们在创建简单SimObject一章一样，我们首先创建一个SimObject Python文件。我们将这个SimObject命名为SimpleMemobj，并且创建在src/learning_gem5/simple_memobj这个SimObject python文件中。
from m5.params import * from m5.</description>
    </item>
    
    <item>
      <title>增加参数到SimObject和更多事件处理</title>
      <link>https://threetigerslin.github.io/BlogPost/post/15adding-param-to-simobject/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/15adding-param-to-simobject/</guid>
      <description>+++
增加参数到SimObject和更多事件处理 作者: Jason Lowe-Power
译者: 落木
+++
gem5的python接口传递参数从python到C++对象是gem5十分强大的一个地方。在本章，我们将探索一些SimObject参数的类型并且怎样用他们来构建我们在之前章节简单的HelloObject。
简易参数 首先，我们将在HelloObject增加延迟的参数和触发事件次数的参数。修改HelloObject类的Python文件（src/learning_gem5/HelloObject.py），增加一个参数。参数被通过增加新的python语句进行设置，
例如，下面的代码有一个名叫time_to_wait的参数，它是个“Latency”类型的参数；number_of_fires是个整数型的参数。
class HelloObject(SimObject): type = &amp;#39;HelloObject&amp;#39; cxx_header = &amp;#34;learning_gem5/hello_object.hh&amp;#34; time_to_wait = Param.Latency(&amp;#34;Time before firing the event&amp;#34;) number_of_fires = Param.Int(1, &amp;#34;Number of times to fire the event before &amp;#34; &amp;#34;goodbye&amp;#34;) Param.声明一个类型为TypeName的参数。通常的类型是整型的Int和浮点型的Float等等。这些类型很像通常的python类。
每一个参数声明有一个或者两个的参数。当传递两个参数（例如上面的number_of_fires），第一个参数该参数的是默认值。在这个例子，如果您初始化一个HelloObject在python配置文件里，而没有为number_of_fires指定任何值。它将设置为默认的值1。
第二个参数是为参数做一个简短的说明。这个必须是一个Python 字符串。如果您只是指定一个单一的参数进行gem5参数的说明，它第一个参数就是描述字符串（例如，time_to_wait）。
gem5同时支持许多复杂的参数类型，而不仅仅是只是内建类型。例如time_to_wait是个Latency类型，Latency类型将一个时间字符串转成模拟器的tick。比如，假设默认的tick速率是1皮秒（10^12皮秒是1秒，或者1THz），1纳秒默认被转换成1000tick。同时，还有其他方便的参数例如Percent，Cycles，MemorySize等。
一旦你已经在SimObject文件里声明了这些参数，你需要复制这些值到C++类的构造函数。下面代码展示了HelloObject构造函数的变化：
HelloObject::HelloObject(HelloObjectParams *params) : SimObject(params), event(*this), myName(params-&amp;gt;name), latency(params-&amp;gt;time_to_wait), timesLeft(params-&amp;gt;number_of_fires) { DPRINTF(Hello, &amp;#34;Created the hello object with the name %s\n&amp;#34;, myName); } 这里，我们使用了latency和timeLeft的默认值。另外，我们存储了参数对象的名字用于后续在成员变量“myName”使用。每一个参数初始化有一个从python配置文件传过来的名字。
对于每一个SimObject，有一个name()函数总是返回该名字，因此，没必要像上面那样增加成员变量去存储名字。
class HelloObject : public SimObject { private: void processEvent(); EventWrapper&amp;lt;HelloObject, &amp;amp;HelloObject::processEvent&amp;gt; event; std::string myName; Tick latency; int timesLeft; public: HelloObject(HelloObjectParams *p); void startup(); }; 等我们运行gem5，会得到下面的错误：</description>
    </item>
    
    <item>
      <title>事件驱动编程</title>
      <link>https://threetigerslin.github.io/BlogPost/post/14event-driven-programming/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/14event-driven-programming/</guid>
      <description>+++
事件驱动编程 作者: Jason Lowe-Power
译者: 落木
+++
gem5是一个事件驱动的仿真器。在本章中，我们将探索如何去创建和调度事件。我们将从HelloObject这个简单例子中举例事件的用法。
创建一个简单事件回调 在gem5事件驱动的模型中，每一个事件有自己的回调函数，在里面处理事件本身。通常这是一个从:cppEvent继承下来的类。尽管如此，gem5提供一个包装函数用来创建简单事件。
在HelloObject头文件里，我们需要声明一个新函数，该函数在每次事件触发的时候执行（processEvent()）。这个函数必须不能带任何参数，并且不能返回任何值。
接下来，我们增加一个事件实例。在这个实例中，我们将使用EventFunctionWrapper允许我们执行任意函数。
我们也增加startup()函数，后面我们会解释为何这样做。
class HelloObject : public SimObject { private: void processEvent(); EventFunctionWrapper event; public: HelloObject(HelloObjectParams *p); void startup(); }; 接下来，我们在HelloObject的构造函数里创建事件。EventFuctionWrapper有两个参数，一个事件执行函数和一个事件名字。名字通常就是含有这个事件的SimObject的名字。当打印这个名字，会自动添加“.wrapped_function_event”在名字后面。
第一个参数是个不带参数且没有返回值的函数（std::function&amp;lt;void(void)&amp;gt;）。通常，这是一个简单的lambda函数。尽管如此，它可以是任何函数。下面，我们在lambda使用this（[this]）所以我们能调用本类实例的成员函数。
HelloObject::HelloObject(HelloObjectParams *params) : SimObject(params), event([this]{processEvent();}, name()) { DPRINTF(Hello, &amp;#34;Created the hello object\n&amp;#34;); } 我们必须定义事件处理函数的实现。在本例子中，我们将简单打印我们正调试的一些东西。
void HelloObject::processEvent() { DPRINTF(Hello, &amp;#34;Hello world! Processing the event!\n&amp;#34;); } 调度事件 最后，当需要调度事件处理的时候，我们首先使用:cpp schedule函数调度事件。这个函数调度某些实例的事件在未来的某个时间点后执行（时间驱动的仿真不允许时间在过去执行）。
我们将在HelloObject类的startup()函数调度这个事件。这个startup()函数是在SimObject里允许调用内部事件的函数。它在仿真开始执行之前不会执行（即：python脚本里simulate()函数被调用之前）。
void HelloObject::startup() { schedule(event, 100); } 这里，我们简单调度事件在tick100的时候执行。通常，你会使用从curTick()开始后某个偏移的时刻，但是因为我们知道startup()函数被调用的时刻是Tick 0，因此我们能够准确使用tick值。
当您使用“Hello”参数运行gem5的时候，调试标记使能类似下面的输出：</description>
    </item>
    
    <item>
      <title>调试Gem5</title>
      <link>https://threetigerslin.github.io/BlogPost/post/13debuging-gem5/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/13debuging-gem5/</guid>
      <description>+++
调试Gem5 作者: Jason Lowe-Power
译者: 落木
+++
在之前的章节里，我们介绍了怎样去创建一个简单的SimObject。在本章，我们将上面简单例子中的stdout替换成gem5的调试功能支持的方式。
gem5通过debug flags提供printf风格的跟踪调试功能。这些flags允许每个组件拥有debug-print的语句，而不用同时使能它们。当运行gem5的时候，您可以从命令行里指定使能哪个flag。
使用debug flags 以第一个简单的simple.py脚本为例子，您可以使能DRAM 调试标记，然后能够获得类型下面的输出。注意这样会生成许多输出到控制台（大概有7MB）。
build/X86/gem5.opt --debug-flags=DRAM configs/learning_gem5/part1/simple.py | head -n 50 gem5 Simulator System. http://gem5.org gem5 is copyrighted software; use the --copyright option for details. gem5 compiled Jan 3 2017 16:03:38 gem5 started Jan 3 2017 16:11:47 gem5 executing on chinook, pid 19234 command line: build/X86/gem5.opt --debug-flags=Exec configs/learning_gem5/part1/simple.py Global frequency set at 1000000000000 ticks per second 0: system.remote_gdb.listener: listening for remote gdb #0 on port 7000 warn: ClockedObject: More than one power state change request encountered within the same simulation tick Beginning simulation!</description>
    </item>
    
    <item>
      <title>创建一个简单的SimObject</title>
      <link>https://threetigerslin.github.io/BlogPost/post/12creating-simple-simobject/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/12creating-simple-simobject/</guid>
      <description>+++
创建一个简单的SimObject 作者: Jason Lowe-Power
译者: 落木
+++
大部分gem5的object都继承了SimObject这个类。SimObject导出了在gem5主要对象的公共接口。SimObject这个C++对象被包装成可以从Python配置文件里进行访问的对象。
SimObject能包含许多参数，这些参数能够被Python配置文件去设置。另外，像整数或者浮点数这些参数也可以作为SimObject参数。通过这种方式您可以创建一个复杂的像真实系统一样的系统层次结构。
在本节，我们将过一遍创建一个“HelloWorld”SimObject。目的是像读者展示一个SimObject是如何被创建和所有SimObject类型对象的模板代码。我们将创建一个简单的Python配置文件例化该SimObject。
在接下来的几个章节里，我们将扩展这个简单的SimObject包含debug支持、动态四件和增加参数。
使用git分支 常见做法是使用git分支来开发gem5新特性。
当想为gem5增加新特性或者修改某部分内容的时候，第一步是创建新分支来进行变更。创建git分支细节可以参考Git Book。
git checkout -b hello-simobject 第一步：为新SimObject创建一个新的Python类 每一个SimObject有一个Python类和它关联。这个Python类描述了SimObject类的能用来被Python脚本控制的参数。对于例子的简单SimObject，我们先不用参数开始。尽管如此，我们简单需要为SimObject声明一个新类，并且设置它的名称和将用来定义对应C++类的C++头文件。
我们在src/learning_gem5目录下创建HelloObject.py的文件。
from m5.params import * from m5.SimObject import SimObject class HelloObject(SimObject): type = &amp;#39;HelloObject&amp;#39; cxx_header = &amp;#34;learning_gem5/hello_object.hh&amp;#34; 不要求type成员的值和类的名称一样，但是如果一样的话更方便理解。type成员是包装这个Python SimObject的C++类名。仅当特殊的环境type成员和类名不一样。
cxx_header成员是包含对应的C++类声明的头文件名。为了方便文件名使用类名对应的小写单词，尽管您可以使用任意名字。
第二步：用C++实现SimObject 接下来我们开始创建hello_object.hh和hello_object.cc。
我们以C++头文件开始，为了方便，gem5包装所有的头文件用文件名的#ifndef/#endif宏来避免重复包含。
在这头文件里，我们只要做的事情是声明我们的类。既然HelloObject是一个SimObject，它必须继承C++ SimObject类。大部分时间，您SimObject应该是SimObject的一个子类而不是它SimObject自身。
SimObject包含了很多虚函数。尽管如此，这些虚函数没有一个纯虚函数，所以最简单的情况，除了构造函数外不需要实现任何其他函数。
所有的SimObject认为它的构造函数有一个参数，这个参数对象是构建系统时自动创建的并且基于我们在上面的python类定义的参数去传递。这个参数类型的名字是由python定义的类名自动生成的。对于我们的“HelloObject”，参数类型名是“HelloObjectParams”
对于我们例子里简单的头文件需要的代码如下：
#ifndef __LEARNING_GEM5_HELLO_OBJECT_HH__ #define __LEARNING_GEM5_HELLO_OBJECT_HH__  #include &amp;#34;params/HelloObject.hh&amp;#34;#include &amp;#34;sim/sim_object.hh&amp;#34; class HelloObject : public SimObject { public: HelloObject(HelloObjectParams *p); }; #endif // __LEARNING_GEM5_HELLO_OBJECT_HH__ 接下来，我们需要在.</description>
    </item>
    
    <item>
      <title>使用默认的配置脚本</title>
      <link>https://threetigerslin.github.io/BlogPost/post/05using-default-config-script/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/05using-default-config-script/</guid>
      <description>+++
使用默认的配置脚本 作者: Jason Lowe-Power
译者: 落木
+++
在本章，我们将探索使用gem5代码库自带的默认配置脚本。gem5带有许多配置脚本，这能够让您很快地使用gem5。但是，一个普遍的困难没有完全理解正在模拟什么就使用这些脚本。使用gem5进行计算机系统结构研究一个很重要的地方就是完全理解正在模拟的系统。本章将和您一块过一遍默认配置脚本里使用的重要选项。
在过去的几章中，您已经创建了自己的配置脚本。这个很有用，因为它让您自己操作涉及到的每一个系统参数。然而，一些系统很复杂去搭建（例如，一个完整系统的ARM或者x86机器）。幸运的是，gem5开发者已经提供了很多能够构建并启动系统的脚本。
目录概览 所有的gem5提供的配置文件可以在configs/目录下找到。目录结构如下：
configs/boot: ammp.rcS halt.sh micro_tlblat2.rcS netperf-stream-udp-local.rcS ... configs/common: Benchmarks.py cpu2000.py Options.py Caches.py FSConfig.py O3_ARM_v7a.py SysPaths.py CacheConfig.py CpuConfig.py MemConfig.py Simulation.py configs/dram: sweep.py configs/example: fs.py read_config.py ruby_mem_test.py ruby_random_test.py memtest.py ruby_direct_test.py ruby_network_test.py se.py configs/ruby: MESI_Three_Level.py MI_example.py MOESI_CMP_token.py Network_test.py MESI_Two_Level.py MOESI_CMP_directory.py MOESI_hammer.py Ruby.py configs/splash2: cluster.py run.py configs/topologies: BaseTopology.py Cluster.py Crossbar.py MeshDirCorners.py Mesh.py Pt2Pt.py Torus.py 每个目录简单描述如下：
boot/ 这些是在full-system模式下用到的rcS文件。这些文件在模拟器Linux系统启动后由shell执行。这些文件大部分用来在full-system模式下控制benchmark。一些是工具函数，例如hack_back_ckpt.rcS。这些文件将在full-system仿真时进行更多地介绍。
common/ 这个目录包含一系列在创建仿真系统时有用的脚本和函数。例如，Cache.py和我们在之前章节里介绍的caches.py和caches_opts.py文件很像。
Options.py包含一系列能用命令行进行设置的选项。例如，CPU的数量、系统时钟等等。当您想通过命令行更改参数更改选项时，这是很好的参考地方。
CacheConfig.py包含了设置经典内存模型的cache参数的选项和函数。
MemConfig.py提供了一些有用的用来进行内存系统设置的帮助函数。
FSConfig.py包含了用来设置各种不同系统的full-system仿真的必要的函数。有专门的章节来介绍full-system仿真。</description>
    </item>
    
    <item>
      <title>搭建开发环境</title>
      <link>https://threetigerslin.github.io/BlogPost/post/11setting-up-dev-env/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/11setting-up-dev-env/</guid>
      <description>+++
搭建开发环境 作者: Jason Lowe-Power
译者: 落木
+++
本节开始介绍如何开始进行gem5开发。
gem5-风格 开发指导 当修改任何开源项目的时候，跟从项目的开发风格是很重要的一件事。关于gem5开发风格的详细细节可以参考wiki 页wiki page。
为了帮助您确认这些开发风格，gem5包含了一个脚本，该脚本在您提交一个变更到git的时候检查。这个脚本应该会由SCons自动加到您的.git/config文件里。请不要忽略这些告警或者错误，尽管您可以使用git选项 &amp;ndash;no-verify忽略风格检查。
主要的开发风格有以下几点：
 使用4个空格，而不用制表符 缩短包含 类名使用驼峰命名法，变量和函数名使用驼峰命名法，本地变量使用蛇形命名法。 为程序增加文档  git分支 大多数人使用分支来进行gem5开发和跟踪各自的变更。这使得提交变更到gem5很方便。另外，使用分支可以让个人的工作更独立。gitbook有一章节详细得讲述了如何使用分支。</description>
    </item>
    
    <item>
      <title>理解gem5的输入和输出</title>
      <link>https://threetigerslin.github.io/BlogPost/post/04understand-gem5-staticis-and-output/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/04understand-gem5-staticis-and-output/</guid>
      <description>+++
理解gem5的输入和输出 作者: Jason Lowe-Power
译者: 落木
+++
除了您仿真脚本的输出外，运行完gem5后，会在m5out的目录下生成3个文件。
config.ini 包含了仿真用到的每一个SimObject和它的仿真参数。
config.json 和config.ini一样，但是是json格式。
stats.txt 所有的注册到仿真器的gem5状态的展示。
config.ini 这个文件是被仿真系统的确切的配置。每一个SimObject的所有参数，无论是否在python配置脚本里设置或者默认值都会在这个文件列出。
下面是从一个simple.py配置文件运行后抓取的config.ini。
[root] type=Root children=system eventq_index=0 full_system=false sim_quantum=0 time_sync_enable=false time_sync_period=100000000000 time_sync_spin_threshold=100000000 [system] type=System children=clk_domain cpu dvfs_handler mem_ctrl membus boot_osflags=a cache_line_size=64 clk_domain=system.clk_domain default_p_state=UNDEFINED eventq_index=0 exit_on_work_items=false init_param=0 kernel= kernel_addr_check=true kernel_extras= kvm_vm=Null load_addr_mask=18446744073709551615 load_offset=0 mem_mode=timing ... [system.membus] type=CoherentXBar children=snoop_filter clk_domain=system.clk_domain default_p_state=UNDEFINED eventq_index=0 forward_latency=4 frontend_latency=3 p_state_clk_gate_bins=20 p_state_clk_gate_max=1000000000000 p_state_clk_gate_min=1000 point_of_coherency=true point_of_unification=true power_model= response_latency=2 snoop_filter=system.membus.snoop_filter snoop_response_latency=4 system=system use_default_range=false width=16 master=system.cpu.interrupts.pio system.</description>
    </item>
    
    <item>
      <title>增加Cache到配置脚本</title>
      <link>https://threetigerslin.github.io/BlogPost/post/03adding-cache-to-config-script/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/03adding-cache-to-config-script/</guid>
      <description>+++
增加Cache到配置脚本 作者: Jason Lowe-Power
译者: 落木
+++
在之前我们作为开始的配置文件基础上，本章将过一遍更复杂的配置。我们将增加一个cache层次到系统，就像下图所示的一样。另外，本章内容将覆盖理解gem5的状态输出和增加命令行参数到脚本里。
创建cache对象 我们将创建经典cache而不是ruby这章介绍的cache，因为现在我们正在模拟CPU系统，不将精力放在模拟cache 一致性上。我们将扩展出Cache SimObject，并配置到我们系统里。首先，我们必须理解在配置cache对象用到的参数。
经典cache和Ruby gem5目前有两个完全独立的子系统用来模拟片上cache，“Classic cache”和“Ruby”。这个历史原因是gem5是由密歇根大学的M5项目和威斯康辛大学的GEMS项目合并而成。GEMS使用Ruby作为cache模拟工具，M5的代码库的cache模型称之为经典cache。这两种模型的区别在于Ruby用来模拟cache一致性细节。作为Ruby的重要部分是SLICC，一种领域定义语言用来定义cache一致性协议。另一方面，经典cache实现了一种简化的相对不灵活的MOESI cache一致性。
具体使用哪种模型，您应该问下自己具体尝试模拟什么样的cache。如果模拟cache一致性协议的变化或者cache一致性协议是影响您的研究结果第一个要素，使用Ruby。另一方面，如果一致性协议对系统影响较小，使用经典cache。
一个长期的目标是gem5统一这两种cache一致性模型到一个整体模型。
Cache Cache SimObject声明可以在 src/mem/cache/Cache.py。这个python文件定义了您可以在SimObject设置的参数，当SimObject被这些参数例化后会传递到C++实现的对象里。Cache SimObject从BaseCache继承过来，正如下文所示，
在BaseCache类，有一些参数例如assoc是个整型的参数。一些参数，例如write_buffers 在这个例子有默认值8。默认参数通常是Param.*的第一个参数，除非第一个参数是个字符串。参数类的字符串参数是关于这个参数的描述（e.g.,tag_latency = Param.Cycles(&amp;ldquo;Tag lookup latency&amp;rdquo;）意味着这个tag_latency控制着“cache命中的延迟”。
这些参数里很多都没有默认值，我们要求这些参数需要在调用m5.instantiat()之前设置好值。
现在，使用特定的参数创建cache，我们将先在configs/tutorial下创建一个新文件，caches.py。第一步创建SimObject的关键地方是扩展这个文件。
from m5.objects import Cache 接下来，我们能像其他Python类一样继承扩展BaseCache。我们能名字这个新类为我们想要的名字。让我们开始以L1 cache开始：
class L1Cache(Cache): assoc = 2 tag_latency = 2 data_latency = 2 response_latency = 2 mshrs = 4 tgts_per_mshr = 20 这里，我们将设置一些不带有默认参数的BaseCache的参数。对于可能的配置选项，您可以在SimObject源代码寻找需要的选项。在这个例子，我们使用BaseCache。
我们扩展BaseCache和设置大部分在BaseCache没有默认的参数。接下来，让我们开始两个L1Cache的子类，L1DCache和L1ICache
class L1ICache(L1Cache): size = &#39;16kB&#39; class L1DCache(L1Cache): size = &#39;64kB&#39; 让我们也用一些合理的参数，创建L2 cache，</description>
    </item>
    
    <item>
      <title>创建一个简单的配置脚本</title>
      <link>https://threetigerslin.github.io/BlogPost/post/02creating-simple-script/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/02creating-simple-script/</guid>
      <description>+++
创建一个简单的配置脚本 作者: Jason Lowe-Power
译者: 落木
+++
概览的本章内容将过一遍怎样搭建一个简单的gem5仿真脚本，并且首次运行gem5。首先假定您已经根据本概览的第一章成功构建gem5二进制文件在build/X86/gem5.opt。
本章我们的脚本将模拟一个简单的系统。该系统有一个CPU核。该CPU核将连接到系统范围的内存总线上。该系统有一个DDR3的单通道也连接到该内存总线上。
gem5配置脚本 gem5二进制程序使用一个参数，该参数指定一个用来搭建和执行仿真程序python脚本。在这个脚本里，你能创建仿真系统，包含系统的各种部件和为每个系统部件指定参数。然后，在脚本里可以开始执行仿真。
这个脚本完全是用户进行定义的，您能够在脚本里面使用任何有效的Python代码。本书提供的例子里使用了大量Python类和继承的语法。作为gem5的用户，您可以决定配置脚本到底有多简单或者复杂。
在Gem5源码的configs/examples里有大量的配置脚本的例子。大部分允许用户能够通过命令行去指定配置项。在开始使用这些复杂的脚本之前，本书使用了更为简单的例子，这些例子足够简单，但也能够运行gem5。希望您读完本节后，能够对仿真脚本是怎样工作的有个很好的理解。
关于SimObjects的额外说明 gem5是基于在SimObject之上的模块化设计。大部分被仿真的系统组件都是SimObject：CPU、Cache、内存控制器、总线等等。gem5从C++的实现导出到python，因此从python的配置脚本您就能够创建任何SimObject，并能够设置他的参数和指定这些SimObject之间的相互交互。可以访问http://www.gem5.org/SimObjects获取更多信息。
创建一个配置文件 让我们开始创建一个新配置文件并打开它：
mkdir configs/tutorial touch configs/tutorial/simple.py 这是一个普通的python文件，会在gem5可执行文件中内嵌的python环境执行。因此，您能使用任何python特性和库。
在这个文件的第一件事情是import m5的库和我们编译的所有SimObject。
import m5 from m5.objects import * 接下来，我们将创建第一个SimObject：我们将用来仿真的系统。在我们的仿真系统里，System SimObject将作为所有其他SimObject的父对象。System对象包含了许多函数（不仅在时序方面）信息，例如物理内存的范围，根始终域，根电压域，内核（在full-system simulation）等。为了创建System SimObject，我们只需简单地用python类例化语句。
system = System() 现在我们已经有一个对我们将要仿真的系统的参考对象，让我们开始驱动这个系统。我们首先需要创建一个时钟域，然后我们在该时钟域上设置时钟频率。在SimObject里面设置参数完全和在python对象设置成员一样，所以，比如我们可以简单的将时钟设置为1G Hz。最后，我们必须为这个时钟域指定一个电压域。因为目前我们不关心系统的功耗，我们只为这个电压域使用默认参数。
system.clk_domain = SrcClockDomain() system.clk_domain.clock = &#39;1GHz&#39; system.clk_domain.voltage_domain = VoltageDomain() 一旦我们创建一个系统，让我们搭建内存将怎样被模拟。我们将使用timing模式进行内存仿真。您必须总是使用timing模式，除了特殊的像fast-forwarding和从checkpoint恢复这些情况。我们将设置一个单一的512MB的内存范围，一个小系统。记住在python配置脚本里，您可以用常见的方式和单位指定内存的大小（如，‘512MB’），同样类似，对于时间您可以使用时间单位（如，‘5ns’）。这些将自动会被转化成响应的内部表示。
system.mem_mode = &#39;timing&#39; system.mem_ranges = [AddrRange(&#39;512MB&#39;)] 现在，我们能创建一个CPU。我们将开始以gem5中的最简单timing-based CPU（TimingSimpleCPU）为例。这个CPU模型在一个时钟周期内执行一条命令，除了那些需要访问内存的请求，这些请求将经过内存系统。为了创建CPU，您可以简单实用下面的对象例化语句。
system.cpu = TimingSimpleCPU() 接下来，我们将创建一个系统范围内的内存总线：
system.membus = SystemXBar() 现在我们有了一个内存总线，让我们开始连接CPU的cache端口到内存总线上。在这个例子，因为我们将仿真的系统没有cache，我们将直接连接I-cache和D-cache端口到内存总线。在这个例子里，我们没有cache。
system.cpu.icache_port = system.membus.slave system.cpu.dcache_port = system.</description>
    </item>
    
    <item>
      <title>构建 gem5</title>
      <link>https://threetigerslin.github.io/BlogPost/post/01building-gem5/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/01building-gem5/</guid>
      <description>+++
构建gem5 作者: Jason Lowe-Power
译者: 落木
+++
本章内容覆盖了怎样搭建gem5开发环境和构建gem5的细节
gem5 环境要求 可以阅读[gem5依赖]获取更多细节。
在Ubuntu系统，您能通过下面的命令行安装依赖:
sudo apt install build-essential git m4 scons zlib1g zlib1g-dev libprotobuf-dev protobuf-compiler libprotoc-dev libgoogle-perftools-dev python-dev python  git： gcc 4.8+ scons python 2.7+ protobuf 2.1+ boost（可选）  获取源代码 更换到您想下载gem5源码的目录，然后使用git clone 命令克隆源码仓库：
git clone https://gem5.googlesource.com/public/gem5 现在您可以更换到包含gem5源码的gem目录了。
第一次构建gem5 让我们开始构建一个基础的x86系统。
目前，您必须首先为各个想要模拟的ISA的gem5程序单独进行编译。另外，如果使用ruby（见ruby介绍这一章），您还得单独为每个缓存一致性协议（cache conherence protocol）单独进行编译。
为了编译gem5，需要使用SCons。Scons使用SConstruct文件（gem5/SConstruct）去搭建一系列的变量然后使用每个源码子目录下的Scons脚本去寻找和编译gem5源码。
SCons第一次运行的时候，会自动创建gem5/build目录。在这个目录下您能够看到SCons生成的文件。另外有为不同选型生成的各自独立的目录用来编译gem5源码（ISA和缓存一致性协议）
有许多默认的编译选项在build_opts目录下。这些文件指定了传递给SCon各种参数去构建gem5。我们使用默认的x86参数，并指定编译所有的CPU模型。您能够在build_opts/x86查看这些传递给SCons的默认值。您也可以通过命令行去覆盖这些指定选项的默认值。
scons build/X86/gem5.opt -j9 gem5 二进制类型 在gem5里的SCons脚本目前支持5种不同的二进制类型的gem5的构建。这些类型基本上都可以从名字看出各自的含义，下文还是解释下细节：
debug 编译时没有使用优化选项并且包含debug符号。这种二进制类型对使用调试器调试和优化一些gem5的选项十分有用。运行这种类型的程序相对其他类型要慢一些。
opt 编译时使用了大部分优化参数（例如：-O3），但是也包含了调试符号。这种二进制程序比debug运行的速度要快，同时又有足够的调试信息用来调试大部分问题。
fast 编译时用了所有的优化参数（包括在特定平台上链接时间优化）和没有debug符号。另外，所有的assert也被移除，但是panic和fatal还是包含的。fast模式是最快速的二进制类型，并且文件大小也比opt模式小很多。尽管如此，fast模式还是您觉得代码没有大的bug的时候使用。
prof和perf 这两种模式的二进制类型用来获取gem5指标概要。prof模式包含GNU profiler（gprof）概要信息，perf模式包含Google 性能工具（gperftools）概要信息。</description>
    </item>
    
    <item>
      <title>介绍</title>
      <link>https://threetigerslin.github.io/BlogPost/post/00introduction/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/00introduction/</guid>
      <description>+++
作者: Jason Lowe-Power
译者: 落木
+++
本文的目标是向读者详细介绍怎样使用gem5和gem5代码库。本文的目的不是提供gem5每个特性的细节描述，通过阅读本文读者可以在课堂和计算机系统结构研究使用gem5的过程中觉得得心应手。另外，读者可以通过修改或者扩展gem5提交到gem5主仓库的方式去改进gem5。
本文是作者在Wisconsin-Madison大学过去的6年的研究生阶段总结的个人使用gem5的经验。举的这些例子是熟悉它的一种方式。和Python（python的诀窍在于“有且只有一个明显的方法去做事情” &amp;ndash; 来自《The Zen of Python》）不一样的地方在于gem5的世界有多种方式去完成同一件事情，因此我的观点是通过本文中的许多例子是最好的上手方式。
我学到的最重要的一课是要想使用像gem5这样复杂的工具，最好在用它之前就真正理解它是怎样工作的。
您能够在下面的链接中找到本书的源码 [https://gem5.googlesource.com/public/gem5-website/+/refs/heads/master/_pages/documentation/learning_gem5/]。
gem5是什么 gem5是模块化的通过离散事件驱动的计算机系统仿真平台。即意味着如下：
 gem5的各种组件是可以重新排列的、参数化的、可扩展的和容易根据需要替换的。 它通过一系列的离散事件模拟逝去的时间。 它能使用不同的方式用来模拟一个或者多个计算机系统。 它不仅仅只是模拟器，也是一个模拟平台。它能够让你使用许多预先定义的组件去构建你自己的仿真系统。  gem5主要由C++和python书写，并且大部分组件都是使用BSD风格的软件许可。在完整系统模式（full system mode，FS mode）下，它能够模拟包含各种设备在内的系统并能够在此之上运行操作系统，或者在系统调用模拟模式（system emulation mode，SE mode）。仿真器在多种层次支持执行Alpha、ARM、MIPS、Power、SPARC、RISC-V和x86上的二进制程序。CPU模型涵盖了两个单CPI模型、一个乱序执行模型和一个按序流水线模型；内存系统模型涵盖了crossbar或者能够用来灵活进行内存子系统模拟的Ruby模拟器。
还有其他组件和特性没在此一一提及，但从上面的描述也能明显察觉到gem5是一个功能强大的仿真平台。在许多个人和公司的支持下gem5还在不断的开发，新的特性在现有的基础上不断被加进来。
能力之外的事情 gem5被设计用来计算机系统结构研究，但是如果您想研究一些新的东西，它不能帮助您验证它能力之外的想法。如果可以的话，有可能意味着其他人已开发用来验证的类似的想法，并将它发布出来。
如果想从获得更多能力，您需要为gem5增加新的特性用来实现您的目标。gem5模块化的设计能帮助您进行修改，而不需要理解模拟器的每一个部分细节。
一旦您增加您需要的特性，请多考虑将您的改动贡献回gem5。这样其他人就能够使用您的辛苦工作，并且gem5能变得更好的模拟器。
寻求帮助 在gem5有两个邮件列表可以用来寻求帮助和建议。gem5-dev邮件列表是用来给工作在gem5主线版本开发者使用，这个版本通过网站发布，并且基本上读者都在基于上面开展工作。gem5-user邮件列表是个更大的供只使用gem5进行用户项目并不准备发布到gem5官方版本的邮件列表。
大部分情况，gem5-users是个比较合适使用的邮件列表，大部分gem5-dev邮件列表的用户同样也使用gem5-users邮件列表，这样大部分的gem5社区的其他成员都能看到您的博客。邮件列表能解答您的问题回答您的疑问，同样邮件列表也能帮助其他人因为他们也能看见回答您问题的人发送的答案。更多关于邮件列表的信息，可先登录访问邮件列表或者浏览文章归档[Mailing Lists]。
在向邮件列表上报问题前，请先阅读 [Reporting Problems]。</description>
    </item>
    
    <item>
      <title>Blog</title>
      <link>https://threetigerslin.github.io/BlogPost/post/blog/</link>
      <pubDate>Tue, 10 Mar 2020 16:20:53 +0800</pubDate>
      
      <guid>https://threetigerslin.github.io/BlogPost/post/blog/</guid>
      <description>Hello github, this is just a test </description>
    </item>
    
  </channel>
</rss>